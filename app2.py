from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import pymysql

# === IMPORTS LANGCHAIN / LLAMA3.1 (avec corrections) ===
from langchain_ollama import ChatOllama
from langchain_community.utilities import SQLDatabase
from langchain_community.tools.sql_database.tool import (
    QuerySQLDataBaseTool,
    InfoSQLDatabaseTool,
    ListSQLDatabaseTool,
)
from langchain_core.prompts import (
    FewShotPromptTemplate,
    PromptTemplate,
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
)
from langchain_community.vectorstores import FAISS
from langchain_core.example_selectors import SemanticSimilarityExampleSelector
# Note : suivant la d√©pr√©ciation, on devrait plut√¥t faire :
# from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain.agents import AgentExecutor, create_react_agent

app = Flask(__name__)
CORS(app)

# üîå Connexion MySQL (inchang√©e)
try:
    conn = pymysql.connect(
        host="localhost",
        port=8889,
        user="root",
        password="root",
        database="application_asbh",
        charset="utf8mb4",
        cursorclass=pymysql.cursors.DictCursor
    )
    cursor = conn.cursor()
    print("‚úÖ Connexion MySQL r√©ussie.")
except pymysql.MySQLError as err:
    print("‚ùå Erreur de connexion MySQL :", err)
    exit()

# üîç Lire le sch√©ma de la BDD (inchang√©)
def get_schema(cursor):
    cursor.execute("SHOW TABLES")
    tables = [row[f'Tables_in_application_asbh'] for row in cursor.fetchall()]
    schema = {}
    for table in tables:
        try:
            cursor.execute(f"DESCRIBE `{table}`")
            columns = [col["Field"] for col in cursor.fetchall()]
            schema[table] = columns
        except pymysql.MySQLError:
            continue
    return schema

schema = get_schema(cursor)
schema_summary = "\n".join([f"{table}: {', '.join(cols)}" for table, cols in schema.items()])

# === INITIALISATION DE L‚ÄôAGENT LLAMA 3.1 ===

# 1. Chargement du SQLDatabase
db = SQLDatabase.from_uri(
    "mysql+pymysql://root:root@localhost:3306/application_asbh",
    sample_rows_in_table_info=3
)

# 2. Exemples few‚Äêshot (adapter aux tables r√©elles)
examples = [
    {
        "input": "Liste tous les joueurs avec leur nom et pr√©nom",
        "query": "SELECT `nom_joueur`, `prenom_joueur` FROM `joueur` LIMIT 50;"
    },
    {
        "input": "Quels sont les noms des joueurs qui jouent au poste de deuxieme ligne ?",
        "query": "SELECT `nom_joueur`, `prenom_joueur` FROM `joueur` WHERE `poste` = 'Deuxi√®me ligne' LIMIT 50;"
    },
    {
        "input": "Quels sont l‚ÄôID et le nom des joueurs mesurant plus de 190 cm ?",
        "query": "SELECT `id_joueur`, `nom_joueur` FROM `joueur` WHERE `taille_cm` > 190 LIMIT 50;"
    },
    {
        "input": "Donne-moi le nom, le poste et le poids des joueurs pesant plus de 100 kg",
        "query": "SELECT `nom_joueur`, `poste`, `poids_kg` FROM `joueur` WHERE `poids_kg` > 100 LIMIT 50;"
    },
    {
        "input": "Qui est le joueur le plus grand ?",
        "query": "SELECT `nom_joueur` FROM `joueur` ORDER BY `taille_cm` DESC LIMIT 1;"
    },
    {
        "input": "Qui est le joueur le plus l√©ger ?",
        "query": "SELECT `nom_joueur` FROM `joueur` ORDER BY `poids_kg` ASC LIMIT 1;"
    },
    {
        "input": "Quels joueurs jouent au poste d‚ÄôAilier ?",
        "query": "SELECT `nom_joueur`, `prenom_joueur` FROM `joueur` WHERE `poste` = 'Ailier' LIMIT 50;"
    },
    {
        "input": "Liste les joueurs n√©s apr√®s le 1er janvier 2025",
        "query": "SELECT `nom_joueur`, `date_naissance` FROM `joueur` WHERE `date_naissance` > '2025-01-01' LIMIT 50;"
    },
    {
        "input": "Quel est le poids moyen de tous les joueurs ?",
        "query": "SELECT AVG(`poids_kg`) AS poids_moyen FROM `joueur`;"
    },
    {
        "input": "Combien y a-t-il de joueurs dans l‚Äô√©quipe 1 ?",
        "query": "SELECT COUNT(*) AS total_joueurs FROM `joueur` WHERE `id_equipe` = 1;"
    },
    {
        "input": "Quels sont les noms et le poste secondaire des joueurs qui en ont un ?",
        "query": "SELECT `nom_joueur`, `poste_secondaire` FROM `joueur` WHERE `poste_secondaire` IS NOT NULL LIMIT 50;"
    },
    {
        "input": "Nomme-moi tous les joueurs actifs avec leur √©quipe d‚Äôappartenance",
        "query": """
            SELECT j.nom_joueur, j.prenom_joueur, e.nom_equipe
            FROM joueur j
            JOIN equipe e ON j.id_equipe = e.id_equipe
            WHERE j.activite = 'actif'
            LIMIT 50;
        """
    },
    {
        "input": "Quels joueurs p√®sent entre 90 kg et 110 kg ?",
        "query": "SELECT nom_joueur, prenom_joueur, poids_kg FROM joueur WHERE poids_kg BETWEEN 90 AND 110 LIMIT 50;"
    },
    {
        "input": "Affiche le nom et la taille des trois joueurs les plus petits",
        "query": "SELECT nom_joueur, taille_cm FROM joueur ORDER BY taille_cm ASC LIMIT 3;"
    },
    {
        "input": "Combien y a-t-il de joueurs par poste ?",
        "query": "SELECT poste, COUNT(*) AS nb_joueurs FROM joueur GROUP BY poste;"
    },
    {
        "input": "Liste des joueurs sans √©quipe (id_equipe NULL)",
        "query": "SELECT nom_joueur, prenom_joueur FROM joueur WHERE id_equipe IS NULL LIMIT 50;"
    },
    {
        "input": "Qui sont les 5 joueurs les plus lourds encore actifs ?",
        "query": "SELECT nom_joueur, prenom_joueur, poids_kg FROM joueur WHERE activite = 'actif' ORDER BY poids_kg DESC LIMIT 5;"
    },
    {
        "input": "Afficher le nom complet et l‚Äô√¢ge des joueurs n√©s avant 2004",
        "query": """
            SELECT CONCAT(prenom_joueur, ' ', nom_joueur) AS joueur,
                   TIMESTAMPDIFF(YEAR, date_naissance, CURDATE()) AS age
            FROM joueur
            WHERE date_naissance < '2004-01-01'
            LIMIT 50;
        """
    },
    {
        "input": "Quelle √©quipe compte le plus de joueurs ?",
        "query": """
            SELECT e.nom_equipe, COUNT(*) AS total
            FROM joueur j
            JOIN equipe e ON j.id_equipe = e.id_equipe
            GROUP BY e.id_equipe
            ORDER BY total DESC
            LIMIT 1;
        """
    },
    # --- TABLE match / score ---------------------------------------------------
    {
        "input": "Quels sont la date et le score du match ayant l‚ÄôID 1 ?",
        "query": "SELECT date, CONCAT(score_locaux, '-', score_visiteurs) AS score FROM match WHERE id_match = 1;"
    },
    {
        "input": "Donne le vainqueur et l‚Äô√©cart de points pour chaque match",
        "query": """
            SELECT id_match,
                   CASE WHEN score_locaux > score_visiteurs THEN locaux ELSE visiteurs END AS vainqueur,
                   ABS(score_locaux - score_visiteurs) AS ecart
            FROM match
            ORDER BY date DESC
            LIMIT 50;
        """
    },
    {
        "input": "Combien d‚Äôessais l‚Äô√©quipe ASBH a-t-elle marqu√©s au match 1 ?",
        "query": """
            SELECT essais
            FROM score s
            JOIN equipe e ON s.id_equipe = e.id_equipe
            WHERE e.nom_equipe = 'ASBH' AND id_match = 1;
        """
    },
    {
        "input": "Affiche le taux de r√©ussite des transformations par √©quipe",
        "query": """
            SELECT e.nom_equipe,
                   ROUND(SUM(transformations) / NULLIF(SUM(essais),0) * 100, 2) AS taux_reussite
            FROM score s
            JOIN equipe e ON s.id_equipe = e.id_equipe
            GROUP BY e.nom_equipe
            HAVING SUM(essais) > 0;
        """
    },
    ]


# 3. Embeddings et s√©lecteur s√©mantique
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
example_selector = SemanticSimilarityExampleSelector.from_examples(
    examples,
    embeddings,
    FAISS,
    k=2,
    input_keys=["input"],
)

# 4. D√©finition du prompt syst√®me incluant {tool_names} et {tools}
# === D√âBUT DE LA SECTION √Ä REMPLACER ===
system_prefix = """
Vous √™tes un agent expert en rugby connect√© √† une base de donn√©es MySQL nomm√©e 'application_asbh'.

Vous disposez des outils suivants :
{tool_names}

Leur description :
{tools}

Voici la structure de la BDD :
{schema_summary}

R√àGLES :
1. Entourez toujours les **noms de tables et de colonnes** avec des backticks `; par exemple, si la table s‚Äôappelle `joueur` et la colonne s‚Äôappelle `poids_kg`, √©crivez `joueur` ou `poids_kg`.  
2. Ne placez **pas** l‚Äôint√©gralit√© de la requ√™te SQL entre backticks : seuls les identifiants (tables/colonnes) doivent l‚Äô√™tre.  
3. Limitez toujours la requ√™te √† 50 r√©sultats maximum (sauf si l‚Äôutilisateur demande explicitement plus).  
4. N‚Äôutilisez jamais `SELECT *`. Ne s√©lectionnez que les colonnes n√©cessaires.  
5. Si la question ne concerne pas la base, renvoyez ‚ÄúJe ne sais pas.‚Äù  
6. En cas d‚Äôerreur SQL, corrigez la syntaxe et r√©essayez.  
7. D√®s que vous avez la r√©ponse, formulez **une phrase compl√®te en fran√ßais** qui reprend la question ou son contexte et y ajoute la r√©ponse. Par exemple :
   - Question : ‚ÄúQuel est le nom du joueur le plus grand ?‚Äù  
     R√©ponse : ‚ÄúLe nom du joueur le plus grand est LIENARD.‚Äù
   - Question : ‚ÄúCombien y a-t-il de joueurs pesant plus de 100 kg ?‚Äù  
     R√©ponse : ‚ÄúIl y a 5 joueurs qui p√®sent plus de 100 kg.‚Äù
   Pour toute autre question li√©e √† la BDD, r√©pondez aussi par une phrase fran√ßaise compl√®te.
8. Ne r√©ponds JAMAIS aux questions sur les mots de passes, et plus g√©n√©ralement sur la table users. Si on te pose une question tu r√©ponds simplement que tu n'as pas le droit d'y r√©pondre.
9. N'effectuez PAS d'op√©rations DML (INSERT, UPDATE, DELETE, DROP).

**Format attendu de la r√©ponse** exactement dans cet ordre :  
Question: <la question de l‚Äôutilisateur>  
Thought: <votre r√©flexion interne>  
Action: <nom exact de l‚Äôoutil √† appeler>  
Action Input: <requ√™te SQL brute, avec backticks uniquement autour des noms de tables/colonnes>  
Observation: <r√©sultat brut renvoy√© par l‚Äôoutil SQL>  

Thought: J‚Äôai la r√©ponse finale  
Final Answer: <Une phrase compl√®te en fran√ßais reprenant la question et y ajoutant la r√©ponse extraite de l‚ÄôObservation>  
"""

dynamic_few_shot_prompt = FewShotPromptTemplate(
    example_selector=example_selector,
    example_prompt=PromptTemplate.from_template("User input: {input}\nSQL query: {query}"),
    input_variables=["input"],
    prefix=system_prefix,
    suffix="""
Question: {input}
{agent_scratchpad}

# IMPORTANT : d√®s que vous voyez une ligne commen√ßant par "Observation:", arr√™tez la recherche et produisez imm√©diatement :
Thought: J‚Äôai la r√©ponse finale
Final Answer: <r√©digez ici une phrase compl√®te en fran√ßais, qui reprend la question ou son contexte et y ajoute la r√©ponse extraite de l‚ÄôObservation>
"""
)

full_prompt = ChatPromptTemplate.from_messages(
    [
        SystemMessagePromptTemplate(prompt=dynamic_few_shot_prompt),
        ("human", "{input}"),
        ("assistant", "{agent_scratchpad}"),
    ]
)
# 5. Instanciation du LLM Llama 3.1
llm = ChatOllama(model="llama3.1:8b")

# 6. Liste des outils SQL
tools = [
    QuerySQLDataBaseTool(db=db),
    InfoSQLDatabaseTool(db=db),
    ListSQLDatabaseTool(db=db),
    # QuerySQLCheckerTool(db=db, llm=llm)
]

# 7. Cr√©ation de l‚Äôagent ‚ÄúReAct‚Äù
agent = create_react_agent(llm, tools, full_prompt)
agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,
    verbose=True,
    max_iterations=15,
    handle_parsing_errors=True
)

# === ROUTES FLASK ===

@app.route("/")
def home():
    return render_template("chatbot.html")

@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("message", "").strip()
    if not user_input:
        return jsonify({"reply": "‚ùå Aucun message fourni."}), 400

    # Construire les listes de noms et descriptions d‚Äôoutils
    tool_names_list = [tool.name for tool in tools]
    tools_list = [f"{tool.name} ‚Äì {tool.description.strip()}" for tool in tools]

    # Pr√©parer l‚Äôinput pour l‚Äôagent
    inputs = {
        "input": user_input,
        "tool_names": tool_names_list,
        "tools": tools_list,
        "schema_summary": schema_summary,
        "agent_scratchpad": []
    }


    try:
        response = agent_executor.invoke(inputs)
        content = response["output"].strip()
    except Exception as e:
        app.logger.exception("Erreur lors de l‚Äôappel √† Llama 3.1")
        return jsonify({"reply": "D√©sol√©, je n‚Äôai pas pu traiter ta demande."}), 500

    # On extrait la ‚ÄúFinal Answer‚Äù
    final_answer = content
    if content.lower().startswith("final answer:"):
        final_answer = content[len("Final Answer:"):].strip()

    return jsonify({"reply": final_answer}), 200

if __name__ == "__main__":
    print(">>> Lancement de Flask sur 0.0.0.0:5000‚Ä¶")
    app.run(host="0.0.0.0", port=5000, debug=True)
